{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// 주문하기페이지:주문하기 위해서 필요한 정보를 입력하는 페이지\n\nimport axios from 'axios';\nimport lib from \"@/scripts/lib\";\nimport { reactive, computed } from 'vue';\nimport router from '@/scripts/router';\nexport default {\n  setup() {\n    const state = reactive({\n      items: [],\n      //배열\n      form: {\n        //객체, 사용자 입력 값이 즉시 반응형으로 업데이트되며, v-model을 통해 입력 폼에 바인딩\n        name: \"\",\n        address: \"\",\n        payment: \"\",\n        cardNumber: \"\",\n        items: \"\",\n        orderDate: \"\"\n      }\n    });\n    const load = () => {\n      //장바구니에 있는 아이템을 보여주는 함수\n      axios.get(\"/api/cart/items\").then(({\n        data\n      }) => {\n        //스프링의 CartController에서 /api/cart/items해당하는 메서드 반환타입이 List형식이므로 뷰에서 배열(data)로 받는다.\n        for (let i = 0; i < data.length; i++) {\n          console.log(`아이템 ${i + 1}:`, data[i]); // 배열에서 각 아이템을 출력\n        }\n        state.items = data; //배열을 뷰의 배열에 담는다.\n      });\n    };\n    const submit = () => {\n      if (state.form.cardNumber.length < 17) {\n        const now = new Date();\n        now.setHours(now.getHours() + 9); // UTC → KST 변환, 현지시간을 한국시간으로 변환\n        state.form.orderDate = now.toISOString().slice(0, 19).replace(\"T\", \" \");\n\n        //$주문날짜 입력하기 ->아직 실험중  \n        console.log(\"state.form.orderDate:\", state.form.orderDate);\n        const args = JSON.parse(JSON.stringify(state.form)); //주문자가 입력한 form 양식을 복사 **깊은 복사->하단 내용 참조\n        args.items = JSON.stringify(state.items); //args 객체의 items 속성만 JSON 형식의 문자열로 변환하는 작업\n\n        //JSON.stringify()는 자바스크립트 배열(state.items)를 JSON 형식으로 변환하면서, 키에 다시 \"\"를 붙이는 작업\n        //**뷰에서 스프링으로 데이터를 전송할 때는 json형식으로 전송해야 하기 때문에 이와 같은 과정이 필요->스프링에서 dto로 받아 처리 \n        console.log(\"서버로 보낼 데이터:\", args);\n        axios.post(\"/api/orders\", args).then(() => {\n          router.push({\n            path: \"/orders\"\n          });\n          alert(\"주문 완료\");\n        });\n      } else {\n        alert(\"카드번호 자리가 16자리를 넘어섰습니다..올바른 번호를 입력하세요\"); //카드 넘버가 16자리 이상이면 예외처리  \n      }\n    };\n    const computedPrice = computed(() => {\n      let result = 0;\n      for (let item of state.items) {\n        result += item.price - item.price * item.discountPrice / 100;\n      }\n      return result;\n    }); //computedPrice\n\n    load();\n    //사용자가 담아둔 상품 목록을 즉시 확인할 수 있는 역할\n    //해당 컴포넌트가 처음으로 로드될 때 데이터를 가져오고 초기화하는 역할을 수행하기 위해서\n\n    return {\n      state,\n      lib,\n      computedPrice,\n      submit\n    };\n  }\n};\n\n//왜 깊은 복사를 하는 걸까요?\n// 1. 얕은 복사(Shallow Copy)의 문제:\n// state.form 객체를 단순히 const args = state.form;처럼 할당하게 되면, args는 state.form을 참조하게 됩니다. \n// 즉, args를 수정하면 state.form도 같이 수정됩니다. 이것은 우리가 원하지 않는 동작일 수 있어요.\n\n// 2. 깊은 복사:\n// JSON.parse(JSON.stringify())를 사용하면 state.form 객체의 깊은 복사가 이루어집니다. \n// 이는 객체 내부의 모든 속성과 값을 새로운 메모리 공간에 복사해서 state.form을 수정해도 args는 영향을 받지 않게 해줍니다.\n\n// 어떻게 작동하나요?\n// JSON.stringify(state.form)는 state.form 객체를 JSON 문자열로 변환합니다.\n// JSON.parse()는 그 JSON 문자열을 다시 자바스크립트 객체로 변환합니다. \n// 이 과정에서 새로운 객체가 생성되기 때문에, 원본 객체와는 독립적인 객체가 됩니다.\n\n// computed()는 반응형 계산된 값을 만들기 위해 사용\n// state.items가 변경될 때마다 총 가격을 다시 계산하고, 이전에 계산된 값은 캐시하여 불필요한 계산을 방지. \n// 이로 인해 성능을 최적화하고, 상태가 변경될 때마다 UI가 자동으로 업데이트되도록 할 수 있습니다\n//일반함수는 매번 계산->성능 저하","map":{"version":3,"names":["axios","lib","reactive","computed","router","setup","state","items","form","name","address","payment","cardNumber","orderDate","load","get","then","data","i","length","console","log","submit","now","Date","setHours","getHours","toISOString","slice","replace","args","JSON","parse","stringify","post","push","path","alert","computedPrice","result","item","price","discountPrice"],"sources":["/Users/axis/MacBookStore/ComStudy/Vue/Vue3-GalleryMall-V1/src/pages/Order.vue"],"sourcesContent":["<template>\n    <div class=\"order\"> <!-- 여기 수정  -->\n<!-- 아래하단 부터 https://getbootstrap.com/docs/5.0/examples/checkout/에서 소스보기 한 것을 복사해서 붙여넣기 -->\n<div class=\"container\">   \n  <main>\n        <div class=\"py-5 text-center\"><h2>주문하기</h2>\n          <p class=\"lead\">배송지와 결제 정보를 입력하시면 구매가 완료됩니다. 주문해 주셔서 감사합니다. </p></div>\n\n        <div class=\"row g-5\">\n          <div class=\"col-md-5 col-lg-4 order-md-last\"><h4\n              class=\"d-flex justify-content-between align-items-center mb-3\">\n            <span class=\"text-primary\">구입 목록</span>\n\n            <span class=\"badge bg-primary rounded-pill\"> {{ state.items.length }}개 </span></h4>\n\n            <ul class=\"list-group mb-3\">\n              <li class=\"list-group-item d-flex justify-content-between lh-sm\" v-for=\"(item, index) in state.items\" :key=\"index\">\n                <div>\n                  <h6 class=\"my-0\">{{ item.name }}</h6>\n                </div>\n                <span class=\"text-muted\">\n                  ₩{{ lib.getCommaFormated(item.price -(item.price*item.discountPrice/100)) }} 원\n                </span>\n              </li>\n            </ul>\n            <h3 class=\"text-center total-price\">\n              ₩{{ lib.getCommaFormated(computedPrice) }} 원\n            </h3>\n          </div>\n          <div class=\"col-md-7 col-lg-8\"><h4 class=\"mb-3\">주문자 정보</h4>\n            <div class=\"needs-validation\" novalidate=\"\">\n\n              <div class=\"row g-3\">\n                <div class=\"col-12\"><label for=\"username\" class=\"form-label\">이름</label>\n                  <input type=\"text\" class=\"form-control\" id=\"username\" placeholder=\"주문자 이름\" v-model=\"state.form.name\">\n                </div>\n\n                <div class=\"col-12\"><label for=\"address\" class=\"form-label\">주소</label>\n                  <input type=\"text\" class=\"form-control\" id=\"address\" placeholder=\"주소 입력\" v-model=\"state.form.address\" >\n                </div>\n\n              </div>\n              <hr class=\"my-4\">\n              <h4 class=\"mb-3\">결제 수단</h4>\n              <div class=\"my-3\">\n                <div class=\"form-check\">\n                  <input id=\"card\" name=\"paymentMethod\" type=\"radio\" class=\"form-check-input\" value=\"card\"  v-model=\"state.form.payment\">\n                  <label class=\"form-check-label\" for=\"card\">신용카드 </label>   <!-- value값이 전송된다 -->\n                </div>\n\n                <div class=\"form-check\">\n                  <input id=\"bank\" name=\"paymentMethod\" type=\"radio\" class=\"form-check-input\" value=\"bank\" v-model=\"state.form.payment\">\n                  <label class=\"form-check-label\" for=\"bank\">무통장입금</label>\n                </div>\n              </div>\n              <label for=\"cc-name\" class=\"form-label\">카드 번호</label>\n              <input type=\"text\" class=\"form-control\" id=\"cc-name\" v-model=\"state.form.cardNumber\" >\n              <hr class=\"my-4\">\n              <button class=\"w-100 btn btn-primary btn-lg \" @click=\"submit()\">결제하기 </button>\n             \n            </div>\n          </div>\n        </div>\n      </main>\n    \n         </div> \n         <!-- container -->\n\n         \n    \n     </div>\n</template>\n\n<script>\n// 주문하기페이지:주문하기 위해서 필요한 정보를 입력하는 페이지\n\nimport axios from 'axios';\nimport lib from \"@/scripts/lib\";\nimport { reactive, computed } from 'vue';\nimport router from '@/scripts/router';\n\n\n  export default{\n    setup(){\n      const state=reactive({\n          items:[],  //배열\n          form:{     //객체, 사용자 입력 값이 즉시 반응형으로 업데이트되며, v-model을 통해 입력 폼에 바인딩\n            name:\"\",\n            address:\"\",\n            payment:\"\",\n            cardNumber:\"\",\n            items:\"\",\n            orderDate:\"\",\n          }\n      });\n\n      const load=()=>{  //장바구니에 있는 아이템을 보여주는 함수\n        axios.get(\"/api/cart/items\").then(({data})=>{  \n          //스프링의 CartController에서 /api/cart/items해당하는 메서드 반환타입이 List형식이므로 뷰에서 배열(data)로 받는다.\n          for (let i = 0; i < data.length; i++) {\n            console.log(`아이템 ${i + 1}:`, data[i]); // 배열에서 각 아이템을 출력\n          }\n        state.items=data;  //배열을 뷰의 배열에 담는다.\n       })\n      }\n      \n     const submit=()=>{ \n       if(state.form.cardNumber.length<17){       \n        const now = new Date();\n        now.setHours(now.getHours() + 9);  // UTC → KST 변환, 현지시간을 한국시간으로 변환\n        state.form.orderDate = now.toISOString().slice(0, 19).replace(\"T\", \" \"); \n\n     //$주문날짜 입력하기 ->아직 실험중  \n        console.log(\"state.form.orderDate:\", state.form.orderDate);\n\n        const args=JSON.parse(JSON.stringify(state.form));  //주문자가 입력한 form 양식을 복사 **깊은 복사->하단 내용 참조\n        args.items=JSON.stringify(state.items);             //args 객체의 items 속성만 JSON 형식의 문자열로 변환하는 작업\n\n       //JSON.stringify()는 자바스크립트 배열(state.items)를 JSON 형식으로 변환하면서, 키에 다시 \"\"를 붙이는 작업\n       //**뷰에서 스프링으로 데이터를 전송할 때는 json형식으로 전송해야 하기 때문에 이와 같은 과정이 필요->스프링에서 dto로 받아 처리 \n        console.log(\"서버로 보낼 데이터:\", args);\n\n        axios.post(\"/api/orders\", args).then(()=>{\n        router.push({path:\"/orders\"})\n        alert(\"주문 완료\")\n     \n      })\n     }else{\n       alert(\"카드번호 자리가 16자리를 넘어섰습니다..올바른 번호를 입력하세요\")   //카드 넘버가 16자리 이상이면 예외처리  \n     }\n     }\n\n      const computedPrice = computed(() => {\n      let result = 0;\n\n      for (let item of state.items) {\n        result += item.price - item.price * item.discountPrice / 100;\n       \n      }\n      \n      return result;\n     })//computedPrice\n\n     load();\n     //사용자가 담아둔 상품 목록을 즉시 확인할 수 있는 역할\n     //해당 컴포넌트가 처음으로 로드될 때 데이터를 가져오고 초기화하는 역할을 수행하기 위해서\n\n    return {state, lib, computedPrice, submit }\n    }\n  }\n\n//왜 깊은 복사를 하는 걸까요?\n// 1. 얕은 복사(Shallow Copy)의 문제:\n// state.form 객체를 단순히 const args = state.form;처럼 할당하게 되면, args는 state.form을 참조하게 됩니다. \n// 즉, args를 수정하면 state.form도 같이 수정됩니다. 이것은 우리가 원하지 않는 동작일 수 있어요.\n\n// 2. 깊은 복사:\n// JSON.parse(JSON.stringify())를 사용하면 state.form 객체의 깊은 복사가 이루어집니다. \n// 이는 객체 내부의 모든 속성과 값을 새로운 메모리 공간에 복사해서 state.form을 수정해도 args는 영향을 받지 않게 해줍니다.\n\n// 어떻게 작동하나요?\n// JSON.stringify(state.form)는 state.form 객체를 JSON 문자열로 변환합니다.\n// JSON.parse()는 그 JSON 문자열을 다시 자바스크립트 객체로 변환합니다. \n// 이 과정에서 새로운 객체가 생성되기 때문에, 원본 객체와는 독립적인 객체가 됩니다.\n\n// computed()는 반응형 계산된 값을 만들기 위해 사용\n// state.items가 변경될 때마다 총 가격을 다시 계산하고, 이전에 계산된 값은 캐시하여 불필요한 계산을 방지. \n// 이로 인해 성능을 최적화하고, 상태가 변경될 때마다 UI가 자동으로 업데이트되도록 할 수 있습니다\n//일반함수는 매번 계산->성능 저하\n\n</script>\n\n<style scoped>\n\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}