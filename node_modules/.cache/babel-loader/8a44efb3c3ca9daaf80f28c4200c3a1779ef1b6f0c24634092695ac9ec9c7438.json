{"ast":null,"code":"//*1.숫자를 컴마로 변화하는 함수(getCommaFormated)를 자바스크립트 lib.js을을 가져와서 사용\nimport lib from \"@/scripts/lib\"; //@->src를 가리킨다.  ../scripts/lib 이렇게 해도 됨\nimport axios from 'axios';\nimport ImageModal from './ImageModal.vue'; //이미지 모달창을 띄우기 위해 가져옴\n\nexport default {\n  name: 'CardComponent',\n  props: {\n    item1: Object //*상단 template에 Home.vue에서 item1의 이름으로 넘어온 객체를 쓸 수 있다.\n  },\n  setup() {\n    const addToCart = itemId => {\n      axios.post(`/api/cart/items/${itemId}`).then(() => {\n        console.log(itemId + \"번 itemId:\" + \"장바구니에 담기 성공\");\n      });\n      //`/api/cart/items/${itemId}`에서 스프링의 @PostMapping(\"/api/cart/items/{itemId}\") 와 일치해야 한다\n      //대소문자도 구별한다.  ${itemId}와 스프링의 {ItemId}로 하는 바람에 오류가 발생했다.\n    };\n    return {\n      lib,\n      addToCart\n    }; //2.가져온 것을 이렇게 선언하면 상단에서 쓸수 있다.\n  }\n};","map":{"version":3,"names":["lib","axios","ImageModal","name","props","item1","Object","setup","addToCart","itemId","post","then","console","log"],"sources":["/Users/axis/MacBookStore/ComStudy/Vue/Vue3-GalleryMall-V1/src/components/Card.vue"],"sourcesContent":["<!-- 개요:그림하나하나에 해당 그림, 제목, 가격, 카트에 담기기능을 하나의 카드 형태로 제공, Home컴포넌트에 컴포넌트로 제공된다.\n **<span class=\"img\" :style=\"{backgroundImage: `url(${item1.imgPath})` }\" />의 설명, :style=\"객체형태\"로 설정\n\n    1.<span class=\"img\" style=\"background-image: url('images/photo1.jpg');\"> </span>의 css스타일을 vue형식으로 바꾼것\n    2. :style 스타일을 동적으로 설정한다는 뜻, background-image을 backgroundImage한 이유는 동적으로 할 때는 카멜표기법을 적용\n    3. {backgroundImage: `url(${item1.imgPath})`} 스타일을 객체형태로 설정하겠다는 뜻 객체형태-> { color: red} \n    4.``(백틱)안에 ${}를 쓰면 객체.속성에 접근할 수 있다.\n    5.동적으로 바인딩 하면(변수를 사용) 변수안에 실제 값이 바뀌어도 따로 코드를 수정할 필요가 없다. \n    \n           -->\n<template>\n  <!-- <span>:특정 부분을 선택해 스타일을 적용하거나 조작할 때 주로 사용 -->\n  <!-- <small> 태그: 의미(semantic)를 추가하면서 크기를 작게 만듭니다. -->\n        <div class=\"card shadow-sm\">\n          <span class=\"img\" :style=\"{backgroundImage: `url(${item1.imgPath})` }\" style=\"cursor: pointer;\"/>\n          <!-- $$ *위는 스타일을 css에서 vue형태로 코딩한 것임 ->url을 수시로 바꿀필요도 없고 별도의 css를 작성하지 않아도 된다. -->\n\n          <div class=\"card-body\">\n            <p class=\"card-text\">\n              <span >{{ item1.name }}&nbsp;</span>  \n              <span class=\"discount badge bg-danger\">  \n                <!-- 부트스트랩제공(검색할것)badge:짧은 정보를 표시,  작은 크기의 텍스트와 테두리를 포함, 배경색이 채워짐. bg-danger:빨간색 배경 -->\n                {{ item1.discountPrice}}% 할인\n              </span>\n            </p>\n\n            <div class=\"d-flex justify-content-between align-items-center\">\n              <button class=\"btn btn-primary\" @click=\"addToCart(item1.id)\"> <!--**카트에 담는 로직 하단 함수참조    -->\n                <i class=\"fa fa-shopping-cart discount badge \" aria-hidden=\"true\"> 담기</i> \n                 <!-- https://fontawesome.com/v4/icon/shopping-cart 에서 중간에 태그를 복사함 -->\n              </button>\n              <small class=\"price text-muted\">정가:₩{{lib.getCommaFormated(item1.price)  }}\n                                                <!-- 3.자바스크립트에서 가져온 함수를 적용 -->\n              </small>\n          \n              <small class=\"discount text-danger\">\n                할인가격:₩{{ lib.getCommaFormated(item1.price -(item1.price*item1.discountPrice/100)) }}\n              </small>\n            </div>\n          </div>   <!-- <div class=\"card-body\"> -->\n        </div>\n     \n\n</template>\n\n\n<script>\n//*1.숫자를 컴마로 변화하는 함수(getCommaFormated)를 자바스크립트 lib.js을을 가져와서 사용\nimport lib from \"@/scripts/lib\"  //@->src를 가리킨다.  ../scripts/lib 이렇게 해도 됨\nimport axios from 'axios';\nimport ImageModal from './ImageModal.vue';  //이미지 모달창을 띄우기 위해 가져옴\n\nexport default{\n  name:'CardComponent',\n  props:{\n    item1:Object,  //*상단 template에 Home.vue에서 item1의 이름으로 넘어온 객체를 쓸 수 있다.\n  },\n\n  setup(){\n    const addToCart=(itemId)=>{\n       axios.post(`/api/cart/items/${itemId}`).then(()=>{\n       console.log( itemId+\"번 itemId:\"+\"장바구니에 담기 성공\");\n     })\n     //`/api/cart/items/${itemId}`에서 스프링의 @PostMapping(\"/api/cart/items/{itemId}\") 와 일치해야 한다\n     //대소문자도 구별한다.  ${itemId}와 스프링의 {ItemId}로 하는 바람에 오류가 발생했다.\n    }\n    return{lib, addToCart}  //2.가져온 것을 이렇게 선언하면 상단에서 쓸수 있다.\n  }\n}\n\n\n</script>\n\n<style scoped>    /* scoped의 역할: 해당 Vue 컴포넌트에서만 스타일을 적용. */\n.card .img{\n  display:inline-block;\n  width:100%;\n  height:250px;\n  background-size:cover;\n  background-position: center;\n}\n\n.card .card-body .price{\n  text-decoration: line-through;\n}\n</style>\n\n\n"],"mappings":"AA+CA;AACA,OAAOA,GAAE,MAAO,eAAc,EAAG;AACjC,OAAOC,KAAI,MAAO,OAAO;AACzB,OAAOC,UAAS,MAAO,kBAAkB,EAAG;;AAE5C,eAAc;EACZC,IAAI,EAAC,eAAe;EACpBC,KAAK,EAAC;IACJC,KAAK,EAACC,MAAM,CAAG;EACjB,CAAC;EAEDC,KAAKA,CAAA,EAAE;IACL,MAAMC,SAAS,GAAEC,MAAM,IAAG;MACvBR,KAAK,CAACS,IAAI,CAAC,mBAAmBD,MAAM,EAAE,CAAC,CAACE,IAAI,CAAC,MAAI;QACjDC,OAAO,CAACC,GAAG,CAAEJ,MAAM,GAAC,WAAW,GAAC,aAAa,CAAC;MAChD,CAAC;MACD;MACA;IACD;IACA,OAAM;MAACT,GAAG;MAAEQ;IAAS,GAAG;EAC1B;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}