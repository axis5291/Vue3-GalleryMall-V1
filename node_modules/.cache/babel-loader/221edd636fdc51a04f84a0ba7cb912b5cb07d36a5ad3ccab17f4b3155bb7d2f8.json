{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header = _resolveComponent(\"Header\");\n  const _component_RouterView = _resolveComponent(\"RouterView\");\n  const _component_ImageModal = _resolveComponent(\"ImageModal\");\n  const _component_Footer = _resolveComponent(\"Footer\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header), _createVNode(_component_RouterView), _createCommentVNode(\" <RouterView /> 태그는 router.js에서 vue-router가 제공하는 태그로  router.js에서 설정한 routes경로가 여기에 렌더링 된다. 별도로 import가 필요없음\\n이것으로 인해서 header와 footer는 가만히 있는 상태에서 url에 따라 중간화면이 home이나 login페이지가 바뀐다\"), _createCommentVNode(\" main.js에서 라우터를 설정하여 <Home />가 필요없게 하였다. \"), _createCommentVNode(\" <Home /> \"), _createVNode(_component_ImageModal), _createVNode(_component_Footer)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","_component_Header","_component_RouterView","_createCommentVNode","_component_ImageModal","_component_Footer"],"sources":["/Users/axis/MacBookStore/ComStudy/Vue/Vue3-GalleryMall-V1/src/App.vue"],"sourcesContent":["<!--\n개요:쇼핑몰 갤러리를 운영하는 목적으로 \n1.vue서버를 운영하는 프론트 서버와 spring 서버(GalleyrMallBackend)를 백앤드로 둔 프로젝트.\n\nsrc/\n├── main.js         # 애플리케이션 진입점 \n├── App.vue         # 최상위 컴포넌트\n├── router.js       # Vue Router 설정\n├── store           # Vuex 상태 관리 설정\n├── assets/         # 정적 파일 (CSS, 이미지 등)\n└── components/     # 컴포넌트 \n\n2.사전설정\n 2-1.package.json에서 로컬pc에서 스프링서버와 충돌을 피하기 위해 뷰서버 포트번호를 3000으로 변경 \n     \"scripts\": {\"serve\": \"vue-cli-service serve --port 3000\"}\n 2-2.vue.config.js에서 spring서버의 데이터를 받기 위해\n     '/api': { target: 'http://localhost:8080'} api로 시작해서 들어오는 서버를 설정, 해당파일 참조 \n\n3.vue.config.js는 url을 간소화하게 하기 위해서 미리 설정, 해당파일 참조\n  현재, 스프링을 사용하는 컴포넌트는  Home.vue와 Login.vue에서 axios.get(\"/api/items\")와 axios.post(\"api/account/login\", state.form)로 요청하고 있다.\n  http://localhost:3000/api/items로 요청하면 데이터가 날라오는데  http://localhost:3000 → Vue.js(프론트엔드) /api/items → Spring Boot(백엔드)구조로 되어있다.\n\n4.main.js에서는 Vue 앱을 초기화하고, App.vue 컴포넌트를 <div id=\"app\">에 마운트는 역할과 각 페이지 매핑의 라우터 설정을 여기서 한다.\n\n5.설치해야할것:npm, npm install axios, npm install vue-router, npm install bootstrap, npm install, npm install vuex@next --save (password 암호화->store.js도 참조), \n \n6.Home컴포넌트가 첫 접속시 메인페이지가 된다..여기에서 서버에 아이템들을 가져와 전시하는 형태\n  현재 Home 컴포넌트는 <RouterView /> 로 대체되어 있다...하단 설명 참조\n-->\n\n<template>\n\n<Header />\n<RouterView /> \n<!-- <RouterView /> 태그는 router.js에서 vue-router가 제공하는 태그로  router.js에서 설정한 routes경로가 여기에 렌더링 된다. 별도로 import가 필요없음\n이것으로 인해서 header와 footer는 가만히 있는 상태에서 url에 따라 중간화면이 home이나 login페이지가 바뀐다-->\n<!-- main.js에서 라우터를 설정하여 <Home />가 필요없게 하였다. -->\n<!-- <Home /> -->\n\n<ImageModal />\n<Footer />\n\n</template>\n\n<script>\nimport HeaderComponent from './components/Header.vue';\n//import HomeComponent from './pages/Home.vue';\nimport FooterComponent from './components/Footer.vue';\nimport ImageModalComponent  from './components/ImageModal.vue';   //$$\nimport store from './scripts/store.js';\nimport axios from 'axios';\nimport { useRoute } from 'vue-router';\nimport { watch } from 'vue';\n\nexport default {\n  name: 'App',\n  components: {\n   Header:HeaderComponent,\n   //Home:HomeComponent,\n   ImageModal:ImageModalComponent,   //$$\n   Footer:FooterComponent, \n   \n  },\n  setup(){\n    const check=()=>{  //url이 바뀔때마다 스프링의 AccountController의 check()를 통해 로그인 여부를 체크\n      axios.get(\"/api/account/check\").then((Object)=>{\n        console.log(\"App.vue에서 실행->스프링에 요청 후 data:\"+Object.data);\n        store.commit('setAccount', Object.data || 0);  //얻어온 id값이 있으면 setAccount에 전달, 없으면 0을 전달\n        })\n    };\n//✔ **로그인 여부 체크는 \"전역적인 동작\"이라 App.vue에서 처리하는 게 적절.\n\n    const route=useRoute();  //router.js에서 만든 라우터객체를 가져옴\n\n    watch(route, ()=>{   //✔ **라우터(URL)가 변경될 때마다 로그인 상태를 확인하는 것도 여기서 하는 게 좋아!\n      check();    //라우터에 매핑되어 있는 리스트에서 url이 바뀔때마다 check()를 실행\n    }); \n  } //setup()\n}\n\n//주석:기존 내용..브라우저의 세션스토리지를 이용해서 로그인여부를 체크\n\n//     const id=sessionStorage.getItem(\"id\");  \n//     //sessionStorage는 웹 브라우저가 제공하는 API, 브라우저에서 데이터를 클라이언트 측에 저장하기 위해 사용, 해당 탭을 닫으면 저장된 데이터도 삭제\n\n//     if(id){\n//       store.commit('setAccount', id); //이 코드는 새로고침을 했을 때 로그인 상태가 그대로 유지 된다.\n//       //commit은 Vuex의 라이브러리에서 제공하는 내장 메서드 -> mutations를 호출하기 위해 사용\n//     }\n//   }\n// }\n\n// 주석:store.commit('setAccount', id)를 호출하면, Vuex의 mutations에 정의된 setAccount 함수가 호출되고, \n// 주석:여기에서 id가 두 번째 인자 값(sendId)로 전달됩니다. ->store.js참조\n</script>\n\n<style>\n.bd-placeholder-img {\n  font-size: 1.125rem;\n  text-anchor: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n}\n\n@media (min-width: 768px) {\n  .bd-placeholder-img-lg {\n    font-size: 3.5rem;\n  }\n}\n\n.b-example-divider {\n  width: 100%;\n  height: 3rem;\n  background-color: rgba(0, 0, 0, .1);\n  border: solid rgba(0, 0, 0, .15);\n  border-width: 1px 0;\n  box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);\n}\n\n.b-example-vr {\n  flex-shrink: 0;\n  width: 1.5rem;\n  height: 100vh;\n}\n\n.bi {\n  vertical-align: -.125em;\n  fill: currentColor;\n}\n\n.nav-scroller {\n  position: relative;\n  z-index: 2;\n  height: 2.75rem;\n  overflow-y: hidden;\n}\n\n.nav-scroller .nav {\n  display: flex;\n  flex-wrap: nowrap;\n  padding-bottom: 1rem;\n  margin-top: -1px;\n  overflow-x: auto;\n  text-align: center;\n  white-space: nowrap;\n  -webkit-overflow-scrolling: touch;\n}\n\n.btn-bd-primary {\n  --bd-violet-bg: #712cf9;\n  --bd-violet-rgb: 112.520718, 44.062154, 249.437846;\n\n  --bs-btn-font-weight: 600;\n  --bs-btn-color: var(--bs-white);\n  --bs-btn-bg: var(--bd-violet-bg);\n  --bs-btn-border-color: var(--bd-violet-bg);\n  --bs-btn-hover-color: var(--bs-white);\n  --bs-btn-hover-bg: #6528e0;\n  --bs-btn-hover-border-color: #6528e0;\n  --bs-btn-focus-shadow-rgb: var(--bd-violet-rgb);\n  --bs-btn-active-color: var(--bs-btn-hover-color);\n  --bs-btn-active-bg: #5a23c8;\n  --bs-btn-active-border-color: #5a23c8;\n}\n\n.bd-mode-toggle {\n  z-index: 1500;\n}\n\n.bd-mode-toggle .dropdown-menu .active .bi {\n  display: block !important;\n}\n</style>\n"],"mappings":";;;;;;uBAAAA,mBAAA,CAAAC,SAAA,SAgCAC,YAAA,CAAUC,iBAAA,GACVD,YAAA,CAAcE,qBAAA,GACdC,mBAAA,yLAC0E,EAC1EA,mBAAA,6CAAgD,EAChDA,mBAAA,cAAiB,EAEjBH,YAAA,CAAcI,qBAAA,GACdJ,YAAA,CAAUK,iBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}